<?php
// SARK Network Helper class
// Developed by CoCo
// Copyright (C) Aelintra Telecom Limited 2018
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

if(php_sapi_name() == 'cli') {
    require_once "/opt/sark/php/srkDbClass";
    require_once "/opt/sark/php/srkHelperClass";
}
else {
	require_once $_SERVER["DOCUMENT_ROOT"] . "../php/srkDbClass";
}

Class nethelper {
	
	protected $interfaceName;
	protected $localIPV4;
	protected $dhcpIPV4;
	protected $staticIPV4;
	protected $networkCIDR;
	protected $networkBrd;
	protected $networkIPV4;
	protected $helper;
	protected $dbh;
	

function __construct() {

// interface name
// Find the first active interface and use it

	$firstUpInterface = trim (`ip addr | grep UP | grep -v lo: | head -n1`);
	if (empty($firstUpInterface)) {
		$this->interfaceName = 'ERROR';
	} 
	else {
		preg_match( '/\d:\s*(\w+):?/',$firstUpInterface,$matches);
		$this->interfaceName = trim($matches[1]);
	}

//	staticIPV4
    $this->dbh = DB::getInstance();
	$res = $this->dbh->query("SELECT STATICIPV4 FROM globals where pkey = 'global'")->fetch(PDO::FETCH_ASSOC);
	if ($res['STATICIPV4']) {
		$this->staticIPV4 = $res['STATICIPV4'];
    }
// localIPV4 & CIDR IPV4
	$iprets = shell_exec( "ip addr show dev " . $this->interfaceName);
	preg_match ( '/inet\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d{1,2}/', $iprets, $matches);
	if (!empty($matches[1])) {
    	$this->localIPV4 = $matches[1];
	}
// dhcpIPV4
	$iprets = shell_exec( "ip -4 addr show dev " . $this->interfaceName . " | grep inet | grep dynamic");
	preg_match ( '/inet\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d{1,2}/', $iprets, $matches);
	if (!empty($matches[1])) {
    	$this->dhcpIPV4 = $matches[1]; 
    }
    else {
    	$this->dhcpIPV4 = $this->localIPV4;
    }   
 // Broadcast IPV4
 	$iprets = shell_exec( "ip -4 addr show dev " . $this->interfaceName . " | grep inet");
 	preg_match ( '/brd\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/', $iprets, $matches); 
	if (!empty($matches[1])) {
		$this->networkBrd = $matches[1];
	}
// network address IPV4
	$iprets = shell_exec( "ip route | grep " . $this->interfaceName );

	preg_match ( '/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(\d{1,2})/', $iprets, $matches);
	if (!empty($matches[1])) {	
		$this->networkIPV4 = $matches[1];
	}
// CIDR IPV4

	if (!empty($matches[2])) {	
		$this->networkCIDR = $matches[2];	
	}	
}

/*
 *	functions
 */	

public function get_interfaceName() {
	return $this->interfaceName;
}

public function get_localIPV4() {
	if ($this->staticIPV4) {
		return $this->staticIPV4;
    }
	return $this->localIPV4;
}

public function get_staticIPV4() {
	return $this->staticIPV4;
}

public function set_staticIPV4($oldIp, $newIp) {	
	$this->helper = new helper;	

	if (empty($oldIp) && empty($newIp)) {
		return -1;
	}

	if (!empty($oldIp)) { 	
		$this->helper->request_syscmd ("ip a delete $oldIp/32 dev " . $this->interfaceName);
	}
/* network commands
	$this->helper->request_syscmd ("rm /etc/network/if-up.d/srkstaticipV4");
*/
	if (!empty($newIp)) { 
		sleep(1);
		$this->helper->request_syscmd ("ip a add $newIp dev " .  $this->interfaceName);
/* network commands
		$this->helper->request_syscmd ("echo '#!/bin/bash' > /etc/network/if-up.d/srkstaticipV4");
		$ipcmd = "ip a add $newIp dev " . $this->interfaceName;
		$this->helper->request_syscmd ("echo $ipcmd >> /etc/network/if-up.d/srkstaticipV4");
		$this->helper->request_syscmd ("chmod +x  /etc/network/if-up.d/srkstaticipV4");
*/
	}
	$this->helper->commitOn();
	return;
}

public function get_dhcpIPV4() {
	
	return $this->dhcpIPV4;
}

public function get_networkCIDR() {
	return $this->networkCIDR;
}

public function get_networkBrd() {
	return $this->networkBrd;
}

public function get_networkIPV4() {
	return $this->networkIPV4;
}

public function get_networkGw() {
	$iprets = shell_exec( "ip route | grep default | grep " . $this->interfaceName);
	preg_match ( '/via\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/', $iprets, $matches);
	$networkGw = $matches[1];
	return $networkGw;	
}

public function get_netMask() {
	$work = str_split(str_pad(str_pad('', $this->networkCIDR, '1'), 32, '0'), 8);
    foreach ($work as &$element) $element = bindec($element);
    $netMask = join('.', $work);
	return $netMask;
}

public function get_IPV6LLA() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep 'inet6' | grep fe80 | tr -s ' ' | cut -d ' ' -f 3" ); 
    $work = preg_replace('/\/64$/','',$work); 
    if ($work) {
    	return trim($work);
    }  
	return -1;
}

public function get_IPV6ULA() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep 'inet6' | grep fd84 | tr -s ' ' | cut -d ' ' -f 3" ); 
    $work = preg_replace('/\/64$/','',$work); 
    if ($work) {
    	return trim($work);
    }
	return -1;
}

public function get_IPV6GUA() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep 'inet6' | grep -v fe80 | grep -v fd84 | tr -s ' ' | cut -d ' ' -f 3" );
    $work = preg_replace('/\/64$/','',$work); 
    if ($work) {
    	return trim($work);
    }   
	return -1;
}

public function get_IPV6ALL() {
	$work = shell_exec( "ip addr show dev " . $this->interfaceName . " | grep inet6" );
    if ($work) {
    	$ipv6array = explode(PHP_EOL,$work);
    	foreach($ipv6array as $row) {
    		$row = trim($row);
    	}
    	return array_filter($ipv6array);
    }   
	return -1;
}

public function internetIsUp() {
	exec ("ping -c1 -W2 8.8.8.8",$rets,$retcode);
	switch ($retcode) {
		case 0:				// successful ping
			return True;
		default:
			return False;   // unsuccessful ping
	}
}

public function get_externip() {

	if ($this->internetIsUp()) {
// try DiG first		
		$r1 = trim(`dig +short myip.opendns.com @resolver1.opendns.com`);
		if (filter_var($r1, FILTER_VALIDATE_IP)) {
			return $r1;
		}
//	DiG failed so lets try ipify
		$r2 = `curl --connect-timeout 5  https://api.ipify.org`;
		if (filter_var($r2, FILTER_VALIDATE_IP)) {
			return $r2;
		}
	}
//  No IP so lets bug out	
	return False;   	 		
}

public function copyFirewallTemplates() {

	$this->dbh = DB::getInstance();
	$this->helper = new helper;
	
	$res = $this->dbh->query("SELECT BINDPORT,FQDN,FQDNINSPECT,SIPFLOOD FROM globals where pkey = 'global'")->fetch(PDO::FETCH_ASSOC);

	if ($res['FQDNINSPECT'] == 'YES') {
		$rule = "'INLINE(ACCEPT) net \$FW tcp ";
		$rule .= $res['BINDPORT'];
		$rule .= ';; -m string --algo bm --to 500 --string "';
		$rule .= $res['FQDN'];
		$rule .= '"';
		$rule .= "'";
		$rc = $this->helper->request_syscmd ("echo $rule > /etc/shorewall/sark_inline_fqdn");

		$rule = "'INLINE(ACCEPT) net \$FW udp ";
		$rule .= $res['BINDPORT'];
		$rule .= ';; -m string --algo bm --to 500 --string "';
		$rule .= $res['FQDN'];
		$rule .= '"';
		$rule .= "'";
		$rc = $this->helper->request_syscmd ("echo $rule >> /etc/shorewall/sark_inline_fqdn");
	}
	else {
		$rc = $this->helper->request_syscmd ("echo '#' > /etc/shorewall/sark_inline_fqdn");
	}

#ToDo
# If we want to use this then it will have to be refactored to use a block like the one above so we can suvstiture 
# the BINDPORT value into the strings
# 
	$file = '/opt/sark/templates/shorewall/sark_inline_limit';
	if (file_exists($file) && $res['SIPFLOOD'] == 'YES') {
		$rc = $this->helper->request_syscmd ("cp $file /etc/shorewall");
	}
	else {
		$rc = $this->helper->request_syscmd ("echo '#' > /etc/shorewall/sark_inline_limit");
	}		
		
}


}

